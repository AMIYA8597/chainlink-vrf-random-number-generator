this is my currently smart contract which is running successfully and the path is    contracts/RandomNumberGenerator.solidity




// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {VRFConsumerBaseV2Plus} from "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import {VRFV2PlusClient} from "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";

contract JackVRFNumberGenerator is VRFConsumerBaseV2Plus {
    event RequestSent(uint256 requestId);
    event NumbersGenerated(uint256[5] mainNumbers, uint256[2] additionalNumbers);

    struct RequestStatus {
        bool fulfilled;
        bool exists;
        uint256[5] mainNumbers;
        uint256[2] additionalNumbers;
    }
    mapping(uint256 => RequestStatus) public s_requests;

    uint256 public s_subscriptionId;
    uint256[] public requestIds;
    uint256 public lastRequestId;

    // Hardcoded for Sepolia
    bytes32 public constant KEY_HASH = 0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae;
    uint32 public constant CALLBACK_GAS_LIMIT = 250000;
    uint16 public constant REQUEST_CONFIRMATIONS = 3;
    uint32 public constant NUM_WORDS = 7;

    constructor(
        uint256 subscriptionId
    ) VRFConsumerBaseV2Plus(0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B) {
        s_subscriptionId = subscriptionId;
    }

    function requestRandomWords() 
        external 
        onlyOwner 
        returns (uint256 requestId) 
    {
        requestId = s_vrfCoordinator.requestRandomWords(
            VRFV2PlusClient.RandomWordsRequest({
                keyHash: KEY_HASH,
                subId: s_subscriptionId,
                requestConfirmations: REQUEST_CONFIRMATIONS,
                callbackGasLimit: CALLBACK_GAS_LIMIT,
                numWords: NUM_WORDS,
                extraArgs: VRFV2PlusClient._argsToBytes(
                    VRFV2PlusClient.ExtraArgsV1({
                        nativePayment: false
                    })
                )
            })
        );
        
        s_requests[requestId] = RequestStatus({
            mainNumbers: [uint256(0), 0, 0, 0, 0],
            additionalNumbers: [uint256(0), 0],
            exists: true,
            fulfilled: false
        });
        
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId);
        return requestId;
    }

    function fulfillRandomWords(
        uint256 _requestId,
        uint256[] calldata _randomWords
    ) internal override {
        require(s_requests[_requestId].exists, "request not found");
        
        // Convert first 5 numbers to range 1-48
        uint256[5] memory mainNumbers;
        for (uint i = 0; i < 5; i++) {
            mainNumbers[i] = (_randomWords[i] % 48) + 1;
        }
        
        // Convert last 2 numbers to range 1-11
        uint256[2] memory additionalNumbers;
        for (uint i = 0; i < 2; i++) {
            additionalNumbers[i] = (_randomWords[5 + i] % 11) + 1;
        }
        
        // Store and update request status
        s_requests[_requestId].mainNumbers = mainNumbers;
        s_requests[_requestId].additionalNumbers = additionalNumbers;
        s_requests[_requestId].fulfilled = true;
        
        emit NumbersGenerated(mainNumbers, additionalNumbers);
    }

    function getRequestStatus(
        uint256 _requestId
    ) external view returns (
        bool fulfilled, 
        uint256[5] memory mainNumbers, 
        uint256[2] memory additionalNumbers
    ) {
        require(s_requests[_requestId].exists, "request not found");
        RequestStatus memory request = s_requests[_requestId];
        return (request.fulfilled, request.mainNumbers, request.additionalNumbers);
    }
}




this is my javascript file  scripts/deploy.js file which is also working currently


const hre = require("hardhat");

async function main() {
    // Get actual subscription ID from VRF Coordinator
    const subscriptionId = process.env.SUBSCRIPTION_ID; // Replace with your subscription ID from VRF.chain.link

    console.log("Deploying JackVRFNumberGenerator...");
    const JackVRFNumberGenerator = await hre.ethers.getContractFactory("JackVRFNumberGenerator");
    const generator = await JackVRFNumberGenerator.deploy(subscriptionId);

    await generator.deployed();

    console.log("JackVRFNumberGenerator deployed to:", generator.address);
    console.log("Subscription ID:", subscriptionId);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });











now generate a different js file where after contract address creation using deploy.js file you can give me a random number which is 1 to 48 any number, but remember its need to come from VRF chainlink


Now my query is , here deploy file run succcessfully, and create a new contract address now i want to create VRF using that smart contract address that only deploy one timeout



so my motive is create chainLink VRF using offChain, and there without solidity file creation, so basis on this file create a single file where i can generate chainlink VRF using OffChain and give me full file without error