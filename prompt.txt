




this is my javascript file  scripts/deploy.js file 


const hre = require("hardhat");
require("dotenv").config();

async function main() {
  try {
    console.log("Starting deployment...");

    // Get deployment parameters
    const subscriptionId = process.env.SUBSCRIPTION_ID;
    const vrfCoordinator = process.env.VRF_COORDINATOR;
    const keyHash = process.env.KEY_HASH;

    // Validate parameters
    if (!subscriptionId || !vrfCoordinator || !keyHash) {
      throw new Error("Missing environment variables");
    }

    // Convert subscription ID to the correct format
    let formattedSubId;
    try {
      const bigNumSubId = hre.ethers.BigNumber.from(subscriptionId);
      formattedSubId = bigNumSubId.mod(hre.ethers.BigNumber.from("18446744073709551616")); // 2^64
      console.log("Formatted Subscription ID:", formattedSubId.toString());
    } catch (error) {
      console.error("Error formatting subscription ID:", error);
      process.exit(1);
    }

    console.log("\nDeployment Parameters:");
    console.log("Original Subscription ID:", subscriptionId);
    console.log("Formatted Subscription ID:", formattedSubId.toString());
    console.log("VRF Coordinator:", vrfCoordinator);
    console.log("Key Hash:", keyHash);

    // Deploy contract
    console.log("\nDeploying RandomNumberGenerator...");
    const RandomNumberGenerator = await hre.ethers.getContractFactory("RandomNumberGenerator");
    
    const randomNumberGenerator = await RandomNumberGenerator.deploy(
      formattedSubId,
      vrfCoordinator,
      keyHash
    );

    await randomNumberGenerator.deployed();

    console.log("\n✅ Contract deployed successfully!");
    console.log(`Contract address: ${randomNumberGenerator.address}`);

  } catch (error) {
    console.error("\n❌ Deployment failed:");
    console.error(error);
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });





// this is my another js file scripts/request-random-number.js











const hre = require("hardhat");
require("dotenv").config();

async function main() {
  try {
    const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;
    if (!CONTRACT_ADDRESS) {
      throw new Error("CONTRACT_ADDRESS not found in environment variables");
    }

    console.log("Contract address:", CONTRACT_ADDRESS);

    const [signer] = await hre.ethers.getSigners();
    console.log("Using account:", signer.address);

    const RandomNumberGenerator = await hre.ethers.getContractFactory("RandomNumberGenerator");
    const contract = await RandomNumberGenerator.attach(CONTRACT_ADDRESS);

    // Check contract state
    const owner = await contract.owner();
    console.log("Contract owner:", owner);

    const subId = await contract.checkSubscription();
    console.log("Subscription ID:", subId.toString());

    const keyHash = await contract.s_keyHash();
    console.log("Key Hash:", keyHash);

    const coordinator = await contract.getCoordinator();
    console.log("VRF Coordinator:", coordinator);

    // Check if the caller is the owner
    if (owner.toLowerCase() !== signer.address.toLowerCase()) {
      throw new Error("The caller is not the contract owner");
    }

    console.log("Requesting random number...");
    
    // Request with higher gas limit
    const tx = await contract.requestRandomNumber({
      gasLimit: 3000000
    });

    console.log("Transaction hash:", tx.hash);
    console.log("Waiting for confirmation...");
    
    const receipt = await tx.wait();
    
    if (receipt.status === 0) {
      throw new Error("Transaction failed");
    }

    const requestSentEvent = receipt.events?.find(e => e.event === "RequestSent");
    const requestId = requestSentEvent?.args?.requestId;

    if (!requestId) {
      throw new Error("No RequestSent event found");
    }

    console.log("Request ID:", requestId.toString());
    console.log("\nWaiting for Chainlink VRF response...");
    console.log("(This may take 1-2 minutes on Sepolia)");

    return new Promise((resolve) => {
      contract.once("NumberGenerated", async (randomNumber) => {
        console.log("\nRandom number generated!");
        console.log("Number (1-48):", randomNumber.toString());

        const [fulfilled, randomWords] = await contract.getRequestStatus(requestId);
        console.log("\nRequest Status:");
        console.log("Fulfilled:", fulfilled);
        console.log("Random Words:", randomWords.map(w => w.toString()));

        resolve();
      });

      // Set timeout
      setTimeout(() => {
        console.log("\nTimeout reached. You can check the contract on Etherscan for the result");
        console.log("Contract address:", CONTRACT_ADDRESS);
        resolve();
      }, 180000); // 3 minutes
    });

  } catch (error) {
    console.error("\nError:", error);
    if (error.error && error.error.message) {
      console.error("Revert reason:", error.error.message);
    }
    if (error.transaction) {
      console.error("Transaction details:", JSON.stringify(error.transaction, null, 2));
    }
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });




Now my query is , here deploy file run succcessfully, and create a new contract address now i want to create VRF using that smart contract address that only deploy one timeout



so my motive is create chainLink VRF using offChain, and there without solidity file creation, so basis on this file create a single file where i can generate chainlink VRF using OffChain and give me full file without error